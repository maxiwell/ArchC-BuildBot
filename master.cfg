# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

# 'repos' is a python dictionary with repository data. Each key at the top 
# refers to each of the software bundles to build under this configuration. 
# Each inner dictionary contains the URL to the repository and the branch 
# from which to get the changes.

repos = {
    'archc' : {
        'url' : 'https://github.com/archc/archc',
        'branch' : 'master'
        },

    'mips' : {
        'url' : 'https://github.com/archc/mips',
        'branch' : 'master'
    }
}

# This is the dictionary that the buildmaster pays attention to.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [
        buildslave.BuildSlave("archc", "pass")
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.
from buildbot.changes.pb import PBChangeSource
c['change_source'] = [
    PBChangeSource(),
]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.
# In this case there are 5 schedulers and 2 filters:
#  * A scheduler and a filter for the web project
#  * A scheduler and a filter for the web app
#  * 3 special schedulers that will trigger each web project builder

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import *

archc_sch = SingleBranchScheduler(
    name='archc_sch',
    branch=repos['archc']['branch'],
    builderNames=['ArchC'], 
    treeStableTimer=None)

archc_force = ForceScheduler(name='archc_force',
    builderNames=['ArchC'],
    branch=ChoiceStringParameter(name="branch",
                                    choices=["master"], default="master"))



c['schedulers'] = [archc_sch, archc_force] 

######## BUILDERS


# The 'builders' list defines the Builders, which tell Buildbot how to perform 
# a build. What steps, and which slaves can execute them.  Note that any 
# particular build will only take place on one slave.

from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source.git import Git

archc_steps = [
        Git(name='fetch', 
            mode='full', 
            repourl=repos['archc']['url'],
            haltOnFailure=True),
        ShellCommand(name='automake',
            description='./boot',
            command="./boot.sh",
            haltOnFailure=True),
        ShellCommand(name='configure',
            description='./configure ...',
            command="./configure --prefix=/tmp/test --with-systemc=/home/max/ArchC/tools/systemc/2.3.1/install",
            haltOnFailure=True),
        ShellCommand(name='make',
            description='make',
            command=["make"],
            haltOnFailure=True),
        ShellCommand(name='installing',
            description='make install',
            command=["make", "install"],
            haltOnFailure=True),
]
archc_factory = BuildFactory(archc_steps)


c['builders'] = [
    BuilderConfig(name='ArchC',
                slavename='archc',
                factory=archc_factory)
]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, 
    forceAllBuilds = False,  
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)

c['status'] = [
    # web interface with github notification entry point active 
    html.WebStatus(http_port=8010, authz=authz_cfg)

    # send email to developers whose changes were included in the build
    #MailNotifier(fromaddr='buildbot@example.com', lookup='example.com',
    #             extraRecipients=['admin@example.com'],
    #             **smtp_kwargs),
]


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "ArchC"
c['titleURL'] = "http://archc.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
