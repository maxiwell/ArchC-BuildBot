# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
import random

# 'repos' is a python dictionary with repository data. Each key at the top 
# refers to each of the software bundles to build under this configuration. 
# Each inner dictionary contains the URL to the repository and the branch 
# from which to get the changes.

repos = {
    'archc' : {
        'url' : 'https://github.com/archc/archc',
        'branch' : 'master'
        },

    'mips' : {
        'url' : 'https://github.com/archc/mips',
        'branch' : 'master'
    },

    'arm' : {
        'url' : 'https://github.com/archc/arm',
        'branch' : 'master'
    },

    'sparc' : {
        'url' : 'https://github.com/archc/sparc',
        'branch' : 'master'
    },

    'powerpc' : {
        'url' : 'https://github.com/archc/powerpc',
        'branch' : 'master'
    }
}

acslaves = {
        'mips' : {
            'builder' : 'Mips', 
            'tempdir' : '/tmp/acslave_mips01/',
            'systemc' : '/home/max/ArchC/tools/systemc/2.3.1/install'
            },
        'arm' : {
            'builder' : 'Arm', 
            'tempdir' : '/tmp/acslave_arm01/',
            'systemc' : '/home/max/ArchC/tools/systemc/2.3.1/install'
            },
        'sparc' : {
            'builder' : 'Sparc', 
            'tempdir' : '/tmp/acslave_sparc01/',
            'systemc' : '/home/max/ArchC/tools/systemc/2.3.1/install'
            },
        'powerpc' : {
            'builder' : 'PowerPC', 
            'tempdir' : '/tmp/acslave_powerpc01/',
            'systemc' : '/home/max/ArchC/tools/systemc/2.3.1/install'
            }

        }

# This is the dictionary that the buildmaster pays attention to.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [
#        buildslave.BuildSlave("archc", "pass"),
        buildslave.BuildSlave("mips", "pass"),
        buildslave.BuildSlave("arm", "pass"),
        buildslave.BuildSlave("sparc", "pass"),
        buildslave.BuildSlave("powerpc", "pass"),
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.
from buildbot.changes.pb import PBChangeSource
c['change_source'] = [
    PBChangeSource(),
]

####### CODEBASES

#all_repositories = {
#        r'https://github.com/archc/archc.git' : 'archc',
#        r'https://github.com/archc/mips.git' : 'mips'
#}

#def codebaseGenerator(chdict):
#    return all_repositories[chdict['repository']]

#c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.
# In this case there are 5 schedulers and 2 filters:
#  * A scheduler and a filter for the web project
#  * A scheduler and a filter for the web app
#  * 3 special schedulers that will trigger each web project builder

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import *

archc_sch = SingleBranchScheduler(
    name='ArchcSch',
    branch=repos['archc']['branch'],
    builderNames=['Mips'], 
    treeStableTimer=None)

def model_sch(model):
    return SingleBranchScheduler(
                name=acslaves[model]['builder']+'Sch',
                branch=repos[model]['branch'],
                builderNames=[acslaves[model]['builder']], 
                treeStableTimer=None)

def force_sch(model):
    return ForceScheduler(name=acslaves[model]['builder']+'Force',
                      builderNames=[acslaves[model]['builder']],
                      codebases=[CodebaseParameter(codebase="archc",
                                                   branch=ChoiceStringParameter(name="branch", 
                                                   choices=["master"], default="master"),
                                                   repository=FixedParameter(name="repository", default="", hide=True),
                                                   project=FixedParameter(name="project", default="", hide=True)),
                                 CodebaseParameter(codebase=model, 
                                                    branch=ChoiceStringParameter(name="branch",
                                                    choices=["master"], default="master"),
                                                    repository=FixedParameter(name="repository", default="", hide=True),
                                                    project=FixedParameter(name="project", default="", hide=True)
                    )])


c['schedulers'] = [archc_sch, model_sch('mips'), force_sch('mips'),
                              model_sch('arm'), force_sch('arm'),
                              model_sch('sparc'), force_sch('sparc'),
                              model_sch('powerpc'), force_sch('powerpc')] 



######## ENVIRONMENT
#
# The problem:  When I run '. ./env.sh' in ShellCommand step, the ENV VARs is not
#               visible to others ShellCommand steps =/
#
# The Solution: 
# http://stackoverflow.com/questions/17696722/how-can-you-source-an-environment-inside-a-buildbot-step

from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand, SetProperty
from buildbot.process.properties import Property  

def glob2list(rc, stdout, stderr):
    ''' Function used as the extrat_fn function for SetProperty class
        This takes the output from env command and creates a dictionary of 
        the environment, the result of which is stored in a property names
        env'''
    if not rc:
        env_list = [ l.strip() for l in stdout.split('\n') ]
        env_dict={ l.split('=',1)[0]:l.split('=',1)[1] for l in 
                      env_list if len(l.split('=',1))==2}
        return {'env':env_dict}


######## BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform 
# a build. What steps, and which slaves can execute them.  Note that any 
# particular build will only take place on one slave.

from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source.git import Git
import os

def model_steps(model, args):
    
    archc_steps = [
            Git(name='archc.git', 
                mode='full', 
                repourl=repos['archc']['url'],
                codebase='archc',
                workdir='archc.git',
                haltOnFailure=True),
            ShellCommand(name='automake',
                description='./autogen.sh',
                command="./autogen.sh",
                workdir='archc.git',
                haltOnFailure=True),
            ShellCommand(name='configure',
                description='./configure',
                workdir='archc.git',
                command="./configure --prefix="+acslaves[model]['tempdir']+"/acinstall --with-systemc="+acslaves[model]['systemc'],
                haltOnFailure=True),
            ShellCommand(name='make',
                description='make',
                command=["make"],
                workdir='archc.git',
                haltOnFailure=True),
            ShellCommand(name='make install',
                description='make install',
                command=["make", "install"],
                workdir='archc.git',
                haltOnFailure=True),
            SetProperty(command="bash -c env",
                extract_fn=glob2list,       
                workdir='archc.git',
                env={'BASH_ENV':'env.sh' })

    ]
    
    model_steps = [
            Git(name=model+'.git', 
                mode='full', 
                repourl=repos[model]['url'],
                codebase=model,
                workdir=model+'.git',
                haltOnFailure=True),
            ShellCommand(name='acsim',
                description='acsim -abi -nw',
                command="acsim "+model+".ac "+args,
                workdir=model+'.git',
                env=Property('env'),
                haltOnFailure=True),
            ShellCommand(name='compile model',
                description='make -f Makefile.archc',
                command="make -f Makefile.archc",
                workdir=model+'.git',
                env=Property('env'),
                haltOnFailure=True)
    ]
    return archc_steps+model_steps


mips_factory = BuildFactory(model_steps('mips', '-abi -nw'))
arm_factory = BuildFactory(model_steps('arm', '-abi -nw'))
sparc_factory = BuildFactory(model_steps('sparc', '-abi -nw'))
powerpc_factory = BuildFactory(model_steps('powerpc', '-abi -nw'))


c['builders'] = [
    BuilderConfig(name='Mips',
                  slavenames=['mips'],
                  factory=mips_factory),
    BuilderConfig(name='Arm',
                  slavenames=['arm'],
                  factory=arm_factory),
    BuilderConfig(name='Sparc',
                  slavenames=['sparc'],
                  factory=sparc_factory),
    BuilderConfig(name='PowerPC',
                  slavenames=['powerpc'],
                  factory=powerpc_factory)   
    ]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, 
    forceAllBuilds = False,  
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)

c['status'] = [
    # web interface with github notification entry point active 
    html.WebStatus(http_port=8010, authz=authz_cfg)

    # send email to developers whose changes were included in the build
    #MailNotifier(fromaddr='buildbot@example.com', lookup='example.com',
    #             extraRecipients=['admin@example.com'],
    #             **smtp_kwargs),
]


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "ArchC"
c['titleURL'] = "http://archc.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
